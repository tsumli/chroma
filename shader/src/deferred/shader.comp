#version 460

#extension GL_ARB_shading_language_include : require
#include "brdf.glsl"
#include "common.glsl"

layout(set = 0, binding = 0) uniform ubo_transform {
    TransformParams transform;
};
layout(set = 0, binding = 1) uniform ubo_camera {
    CameraParams camera;
};

layout(rgba32f, set = 1, binding = 0) uniform writeonly image2D result;
layout(rgba32f, set = 1, binding = 1) uniform readonly image2D color;
layout(rgba32f, set = 1, binding = 2) uniform readonly image2D normal;
layout(r32f, set = 1, binding = 3) uniform readonly image2D depth;
layout(rgba32f, set = 1, binding = 4) uniform readonly image2D metallic_roughness;
layout(rgba32f, set = 1, binding = 5) uniform readonly image2D emissive;
layout(set = 2, binding = 0) uniform samplerCube skybox;
layout(local_size_x = 16, local_size_y = 16) in;

vec4 ReconstructWorldPositionFromDepth(in vec2 coords, in float depth, in float inv_width,
    in float inv_height) {
    const vec2 inv_screen_res = vec2(inv_width, inv_height);

    const vec2 screen_pos = (coords * inv_screen_res) * vec2(2.0f, -2.0f) + vec2(-1.0f, 1.0f);

    const vec4 raw_world_pos =
        transform.proj_to_world * vec4(screen_pos * vec2(1.0f, -1.0f), depth, 1.0f);
    return raw_world_pos / raw_world_pos.w;
}

vec4 SampleSkybox(vec3 view)
{
    // TODO: Remove this trick
    view.x = -view.x;
    return texture(skybox, view);
}

void main() {
    const uint width = imageSize(result).x;
    const uint height = imageSize(result).y;
    if (gl_GlobalInvocationID.x >= width || gl_GlobalInvocationID.y >= height) {
        return;
    }

    const vec4 pixel_color =
        imageLoad(color, ivec2(gl_GlobalInvocationID.xy));
    float pixel_depth = imageLoad(depth, ivec2(gl_GlobalInvocationID.xy)).r;
    const vec4 pixel_world_pos = ReconstructWorldPositionFromDepth(
            vec2(gl_GlobalInvocationID.xy), pixel_depth, 1.0f / width, 1.0f / height);
    const vec3 pixel_normal = imageLoad(normal, ivec2(gl_GlobalInvocationID.xy)).rgb;
    const vec2 pixel_metallic_roughness = imageLoad(metallic_roughness, ivec2(gl_GlobalInvocationID.xy)).rg;
    const float pixel_metallic = pixel_metallic_roughness.r;
    const float pixel_roughness = pixel_metallic_roughness.g;
    const vec4 pixel_emissive = imageLoad(emissive, ivec2(gl_GlobalInvocationID.xy));

    vec4 result_color = vec4(0.0f);
    const vec3 view_dir = normalize(camera.position - pixel_world_pos.xyz);

    // if there is no object in the pixel, sample the skybox
    if (pixel_depth == 1.0f) {
        vec4 pixel_background = SampleSkybox(-view_dir);
        result_color = pixel_background;

        // gamma correction
        result_color.rgb = pow(result_color.rgb, vec3(1.0f / 2.2f));
        imageStore(result, ivec2(gl_GlobalInvocationID.xy), result_color);
        return;
    }

    // BRDF
    const vec3 light_position = vec3(5.0f, 5.0f, 5.0f);
    const vec3 light_dir = normalize(light_position - pixel_world_pos.xyz);
    const vec3 light_color = vec3(1.0f);

    const vec3 half_dir = normalize(light_dir + view_dir);
    const float n_o_l = clamp(dot(pixel_normal, light_dir), 0.0, 1.0);
    const float n_o_v = clamp(dot(pixel_normal, view_dir), 0.0, 1.0);
    const float n_o_h = clamp(dot(pixel_normal, half_dir), 0.0, 1.0);
    const float l_o_h = clamp(dot(light_dir, half_dir), 0.0, 1.0);
    const vec3 diffuse_brdf = BrdfDiffuse(
            pixel_color.rgb,
            n_o_v, n_o_l, l_o_h, pixel_roughness);

    const vec3 specular_brdf = BrdfSpecular(
            pixel_color.rgb,
            pixel_normal,
            view_dir,
            light_dir,
            half_dir,
            pixel_roughness
        );

    const vec4 brdf = (1.0 - pixel_metallic) * vec4(diffuse_brdf, 1.0) + pixel_metallic * vec4(specular_brdf, 1.0);

    const vec3 reflection_uvw = reflect(-view_dir, pixel_normal);
    const vec4 pixel_reflection = SampleSkybox(reflection_uvw);
    result_color = brdf * n_o_l * vec4(light_color, 1.0) + pixel_emissive;

    // gamma correction
    result_color.rgb = pow(result_color.rgb, vec3(0.45));
    imageStore(result, ivec2(gl_GlobalInvocationID.xy), result_color);
}
