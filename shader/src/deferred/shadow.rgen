#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_shader_realtime_clock : require
#extension GL_GOOGLE_include_directive : require

#include "common.glsl"
#include "raytracing_common.glsl"
#include "random.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1) uniform TransformUbo {
    TransformParams transform;
};

layout(set = 1, binding = 0, rgba32f) uniform image2D result;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

void main() {
    uint seed =
        tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockRealtimeEXT()));
    const float r1 = rnd(seed);
    const float r2 = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel
    // each time, to provide antialiasing.
    // const vec2 subpixel_jitter = vec2(r1, r2);
    const vec2 subpixel_jitter = vec2(0.5, 0.5);
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
    const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = uv * 2.0 - 1.0;

    vec4 origin = transform.view_inv * vec4(0, 0, 0, 1);
    const vec4 target = transform.proj_inv * vec4(d.x, d.y, 1, 1);
    vec4 direction = transform.view_inv * vec4(normalize(target.xyz), 0);

    const float t_min = 0.01;
    const float t_max = 1000.0;

    vec3 result_color = vec3(0);
    ray_payload.color = vec3(1);

    traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, t_min, direction.xyz,
        t_max, 0);
    result_color = ray_payload.color;

    imageStore(result, ivec2(gl_LaunchIDEXT.xy), vec4(result_color, 1.0));
}
